knitr::opts_chunk$set(echo = FALSE)
# Fit a linear regression model ('m2') with 'Both.sexes' as the response variable and 'Year' as the predictor variable using data from 'd_table1'.
m2=lm(Both.sexes~Year,data=d_table1)
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Read the CSV file located at the specified path into a data frame named 'd'
d =read.csv ("/Users/mark/Desktop/course/staa57/R_CSV_DATA_ANALYZE/g0811_05.csv")
# Load the 'tidyverse' package, which includes a collection of R packages for data manipulation and visualization
library(tidyverse)
# Load the 'ggplot2' package, a popular R package for creating graphics and plots
library(ggplot2)
# Load the 'knitr' package, which provides tools for dynamic report generation in R
library(knitr)
# Load the 'rpart' package, which provides functions for recursive partitioning and regression trees
library(rpart)
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
library(caret)
install.packages("caret")
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
library(caret)
set.seed(123) # for reproducibility
cv <- trainControl(method = "cv", number = 5)
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
library(caret)
set.seed(123) # for reproducibility
cv = trainControl(method = "cv", number = 5)
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
library(caret)
set.seed(123) # for reproducibility
cv = trainControl(method = "cv", number = 5)
cv
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
varImpPlot(rforest.m)
confusionMatrixPlot(confusionMatrix(d_randomforest$rforest_pred, d_randomforest$reason))
# Filter the data frame 'd' to exclude rows where 'Reason' is "Part-time employment, all reasons".
d1=d %>% filter(Reason!="Part-time employment, all reasons")
# Assign a binary value to the 'reason' variable based on 'Reason' values:
# - 0 if the reason does not involve looking for full-time work in the last month
# - 1 if the reason involves looking for full-time work in the last month
d1=d1%>% mutate(reason=case_when(Reason=="  Own illness"~0,
Reason=="  Caring for children"~0,
Reason=="  Other personal or family responsibilities"~0,
Reason=="  Going to school"~0,
Reason=="  Personal preference"~0,
Reason=="  Other voluntary"~0,
Reason=="  Business conditions, did not look for full-time work in last month"~0,
Reason=="  Could not find full-time work, did not look for full-time work in last month"~0,
Reason=="  Business conditions, looked for full-time work in last month"~1,
Reason=="  Could not find full-time work, looked for full-time work in last month"~1))
# Load the 'randomForest' package for building random forest models
library(randomForest)
# Build a random forest model ('rforest.m') to predict the 'reason' variable based on other variables.
rforest.m = randomForest(reason ~ Year+Geography+Immig.+Age.group++Both.sexes+Men+Women,data=d1,ntree=500,importance=TRUE)
# Visualize variable importance using the 'varImpPlot' function
varImpPlot(rforest.m)
# Make predictions using the random forest model on the same data ('d1') and calculate the mean squared error
d_randomforest=d1%>%mutate(rforest_pred=predict(rforest.m,new_data=d1))
mean((d_randomforest$reason-d_randomforest$rforest_pred)^2)
tuneGrid <- expand.grid(.mtry = c(2, 4, 6)) # Example grid of hyperparameters
set.seed(123)
tuned_model <- train(reason ~ Year + Geography + Immig. + Age.group + Both.sexes + Men + Women,
data = d1,
method = "rf",
trControl = cv,
tuneGrid = tuneGrid)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message = FALSE)
# Read the CSV file located at the specified path into a data frame named 'd'
d =read.csv ("/Users/mark/Desktop/course/staa57/R_CSV_DATA_ANALYZE/g0811_05.csv")
# Load the 'tidyverse' package, which includes a collection of R packages for data manipulation and visualization
library(tidyverse)
# Load the 'ggplot2' package, a popular R package for creating graphics and plots
library(ggplot2)
# Load the 'knitr' package, which provides tools for dynamic report generation in R
library(knitr)
# Load the 'rpart' package, which provides functions for recursive partitioning and regression trees
library(rpart)
# Display the column names of the data frame 'd'
names(d)
